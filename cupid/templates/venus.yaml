{{- range untilStep 1 (int (add1 (int64 .Values.venus.pool.replicaCount))) 1 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cupid.fullname" $ }}-venus{{ . }}
  labels:
    app: {{ $.Values.venus.selectorLabel }}
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: {{ $.Values.venus.selectorLabel }}
  serviceName: {{ include "cupid.fullname" $ }}-venus{{ . }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ $.Values.venus.selectorLabel }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cupid.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.venus.image.repository }}:{{ $.Values.venus.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.venus.image.pullPolicy }}
          args: ["--repodir", {{ $.Values.venus.arguments.repodir }}, "daemon", {{- if $.Values.venus.arguments.snapshot }} "--import-snapshot", {{ $.Values.venus.arguments.snapshot }},{{- end }} "--auth-url", {{ include "cupid.fullname" $ }}-auth-service ]
          env:
            - name: FIL_PROOFS_PARAMETER_CACHE
              value: {{ $.Values.venus.arguments.paramdir }}
            - name: BELLMAN_NO_GPU 
              value: "1" {{/* $.Values.venus.arguments.bellmannogpu */}}
            - name: BELLMAN_VERIFIER 
              value: "cpu" {{/* $.Values.venus.arguments.bellmanverifier */}}
          ports:
            - name: http
              containerPort: {{ $.Values.venus.service.port }}
              protocol: TCP
{{- /*
          readinessProbe:
            tcpSocket:
              port: {{ $.Values.venus.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 1
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: {{ $.Values.venus.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: {{ $.Values.venus.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 360
            periodSeconds: 10
*/}}
          resources:
            {{- toYaml $.Values.venus.agent.resources | nindent 12 }}
          volumeMounts:
          - name: data
            mountPath: {{ $.Values.venus.volumes.mountpathData }}
          - name: proofparams
            mountPath: {{ $.Values.venus.volumes.mountpathProofParams }}
      {{- with $.Values.venus.pool.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.venus.pool.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.venus.pool.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: venus
      resources:
        requests:
          storage: {{ $.Values.venus.pool.storage }}
  - metadata:
      name: proofparams
    spec:
      accessModes: ["ReadOnlyMany"]
      storageClassName: proofparams
      resources:
        requests:
          storage: {{ $.Values.venus.pool.paramStorage }}
{{- end }}
