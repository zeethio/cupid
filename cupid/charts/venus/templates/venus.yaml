{{- range untilStep 1 (int (add1 (int64 .Values.pool.replicaCount))) 1 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "venus.fullname" $ }}-{{ . }}
  labels:
    {{- include "venus.labels" $ | nindent 4 }}
spec:
  replicas: 1 
  selector:
    matchLabels:
      {{- include "venus.selectorLabels" $ | nindent 6 }}
  serviceName: {{ include "venus.fullname" $ }}{{ . }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "venus.selectorLabels" $ | nindent 8 }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "venus.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          args: 
          - "--repodir" 
          - {{ $.Values.arguments.repodir }}
          - "--cmdapiaddr"
          - {{ $.Values.arguments.cmdapiaddr }}
          - "daemon" 
          {{- if $.Values.arguments.snapshot }} 
          - "--import-snapshot" 
          - {{ $.Values.arguments.snapshot }}
          {{- end }} 
          - "--auth-url" 
          - {{ $.Values.arguments.authUrl }}
          env:
            - name: FIL_PROOFS_PARAMETER_CACHE
              value: {{ $.Values.arguments.paramdir }}
            - name: BELLMAN_NO_GPU 
              value: "1" {{/* $.Values.arguments.bellmannogpu */}}
            - name: BELLMAN_VERIFIER 
              value: "cpu" {{/* $.Values.arguments.bellmanverifier */}}
          ports:
            - name: http
              containerPort: {{ $.Values.service.port }}
              protocol: TCP
{{- /*
          readinessProbe:
            tcpSocket:
              port: {{ $.Values.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 1
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: {{ $.Values.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: {{ $.Values.service.port }}
            initialDelaySeconds: 60
            failureThreshold: 360
            periodSeconds: 10
*/}}
          resources:
            {{- toYaml $.Values.agent.resources | nindent 12 }}
          volumeMounts:
          - name: data
            mountPath: {{ $.Values.volumes.mountpathData }}
      {{- with $.Values.pool.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.pool.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.pool.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: cupid-local-miner5
      resources:
        requests:
          storage: {{ $.Values.pool.storage }}
{{- end }}
